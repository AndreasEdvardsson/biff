(ns {{parent-ns}}.views
  (:require [biff.util-tmp :as bu]
            [biff.rum :as br]
            [crux.api :as crux]
            [ring.middleware.anti-forgery :refer [*anti-forgery-token*]]))

(def default-opts
  #:base{:title "Example app"
         :lang "en-US"
         :description "Here is my example app."})

(def head*
  [[:link {:rel "stylesheet" :href "/css/main.css"}]
   [:link {:rel "stylesheet" :href "/css/custom.css"}]])

(defn base [{:keys [base/head] :as opts} & contents]
  (br/base
    (merge
      default-opts
      opts
      {:base/head (concat head* head)})
    [:.p-3.mx-auto.max-w-prose contents]))

(def signin-form
  (list
    [:.text-lg "Email address:"]
    [:.h-3]
    [:form.mb-0 {:action "/api/send-token" :method "post"}
     [:.flex
      [:div
       [:input.input-text
        {:name "email" :type "email" :placeholder "Email"
         :value "abc@example.com"}]]
      [:.w-3]
      [:button.btn {:type "submit"} "Sign in"]]]
    [:.h-1]
    [:.text-sm "Doesn't need to be a real address."]))

(defn home [_]
  (base
    {}
    signin-form))

(def signin-sent
  (base
    {}
    [:p "Sign-in link sent, please check your inbox."]
    [:p.text-sm "(Just kidding: click on the sign-in link that was printed to the terminal.)"]))

(def signin-fail
  (base
    {}
    [:p "Couldn't sign in."]
    signin-form))

(defn form [{:keys [event]} & contents]
  [:form.mb-0 {:method "post"
               :action "/api/write"}
   [:input {:type "hidden"
            :name "__anti-forgery-token"
            :value *anti-forgery-token*}]
   [:input {:type "hidden" :name "event" :value event}]
   contents])

(defn write-foo [{:keys [value]}]
  (form {:event "write-foo"}
    [:.text-lg "Foo: " [:span.font-mono (pr-str value)]]
    [:.text-sm.text-gray-600
     "This demonstrates updating a document."]
    [:.h-1]
    [:.flex
     [:input.input-text.w-full {:name "foo"}]
     [:.w-3]
     [:button.btn {:type "submit"} "Update"]]))

(defn write-message []
  (form {:event "write-message"}
    [:.text-lg "Write a message"]
    [:.text-sm.text-gray-600
     "Sign in with an incognito window to have a conversation with yourself."]
    [:.h-2]
    [:div [:textarea.input-text.w-full {:name "text"}]]
    [:.h-3]
    [:.flex.justify-end
     [:button.btn.ml-auto {:type "submit"} "Send"]]))

(defn app [{:keys [biff.crux/db biff/uid]}]
  (let [{:keys [user/email user/foo]} (crux/entity @db uid)
        message-cutoff (bu/add-seconds (java.util.Date.) (* -60 5))
        messages (->> (crux/q @db
                              '{:find [(pull message [*])]
                                :in [t0]
                                :where [[message :msg/text]
                                        [message :msg/sent-at t]
                                        [(<= t0 t)]]}
                              message-cutoff)
                      (map first)
                      (sort-by :msg/sent-at #(compare %2 %1)))]
    (base
      {}
      [:div
       [:.flex
        [:div "Signed in as " email]
        [:.flex-grow]
        [:a.text-blue-500.hover:text-blue-800 {:href "/api/signout"}
         "Sign out"]]
       [:.h-6]
       [:p "When you've had enough fun here, start reading through the code. Here are some good "
        "starting points:"]
       [:ul.list-disc.pl-8.font-mono
        [:li "src/{{parent-path}}/routes.clj"]
        [:li "src/{{parent-path}}/core.clj"]
        [:li "all-tasks/10-biff"]
        [:li "config/"]]
       [:.h-6]
       (write-foo {:value foo})
       [:.h-6]
       (write-message)
       [:.h-6]
       [:.text-lg "Messages sent in the past 5 minutes:"]
       [:.text-sm.text-gray-600 "(refresh to see new messages from other users)"]
       [:.h-6]
       (when (empty? messages)
         [:p "No messages yet."])
       (for [{:msg/keys [text sent-at user]
              doc-id :crux.db/id} messages]
         [:.mb-3
          [:.flex.align-baseline.text-sm
           [:.text-gray-600 sent-at]
           [:.w-4]
           (when (= user uid)
             (form {:event "delete-message"}
                   [:input {:type "hidden" :name "message-id" :value doc-id}]
                   [:button.text-blue-500.hover:text-blue-800
                    {:type "submit"}
                    "Delete"]))]
          [:div text]])])))

(def static-pages
  {"/signin-sent/" signin-sent
   "/signin-fail/" signin-fail})
