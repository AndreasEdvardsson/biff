(ns {{parent-ns}}.routes
  (:require
    [biff.crux-tmp :as bcrux]
    [biff.http :as bhttp]
    [biff.views :as bv]
    [biff.util :as bu]
    [clojure.stacktrace :as st]
    [crux.api :as crux]
    [rum.core :as rum]
    [{{parent-ns}}.routes.auth :as auth]
    [{{parent-ns}}.views :as views]))

; See https://biff.findka.com/#http-routes

; Test it out:
; curl http://localhost:8080/echo?foo=bar
; curl -XPOST http://localhost:8080/echo -F foo=bar
; curl -XPOST http://localhost:8080/echo -H 'Content-Type: application/edn' -d '{:foo "bar"}'
; curl -XPOST http://localhost:8080/echo -H 'Content-Type: application/json' -d '{"foo":"bar"}'
(defn echo [req]
  ; Default :status is 200. Default :body is "". :headers/* and
  ; :cookies/* are converted to `:headers {...}` and `:cookies {...}`.
  {:headers/Content-Type "application/edn"
   :body (prn-str (merge
                    (select-keys req [:params :body-params])
                    (bu/select-ns req 'params)))})

; This requires authentication, so you'll have to test it from the browser.
(defn whoami [{:keys [biff/uid biff.crux/db]}]
  {:body (:user/email (crux/entity @db uid))
   :headers/Content-Type "text/plain"})

(defn write [{:keys [biff.crux/db biff.crux/node biff/uid params/event params] :as sys}]
  (try
    (when (and (= event "delete-message")
            (not= uid (->> params
                        :message-id
                        java.util.UUID/fromString
                        (crux/entity @db)
                        :msg/user)))
      (throw (ex-info "Unauthorized transaction" {:params params :biff/uid uid})))
    (bcrux/submit-await-tx
      sys
      (case event
        "write-foo"
        {[:user uid] (assoc (crux/entity @db uid)
                            :user/foo (:foo params))}

        "write-message"
        {[:msg] {:msg/user uid
                 :msg/sent-at (java.util.Date.)
                 :msg/text (:text params)}}

        "delete-message"
        [[:crux.tx/delete (java.util.UUID/fromString (:message-id params))]]))
    (catch Exception e
      ; An exception would be thrown if the transaction doesn't meet the specs
      ; in {{parent-ns}}.rules, which would happen if the client e.g. set :msg/text
      ; to a number.
      (st/print-stack-trace e)))
  {:status 302
   :headers/Location "/app"})

(defn home [{:keys [biff/uid] :as req}]
  (if (some? uid)
    {:status 302
     :headers/Location "/app"}
    (bv/render views/home req)))

(defn app [{:keys [biff/uid] :as req}]
  (if (nil? uid)
    {:status 302
     :headers/Location "/"}
    (bv/render views/app req)))

(defn on-error [{:keys [status]}]
  (let [msg (case status
              401 "Not authorized."
              404 "Not found."
              405 "Not allowed."
              406 "Not acceptable."
              500 "Internal server error.")]
    {:status status
     :headers/Content-Type "text/html"
     :body (str "<h1>" msg "</h1>")}))

(defn wrap-signed-in [handler]
  (fn [{:keys [biff/uid] :as req}]
    (if (some? uid)
      (handler req)
      (on-error {:status 401}))))

; See https://cljdoc.org/d/metosin/reitit/0.5.10/doc/introduction#ring-router
(def routes
  [["/" {:get #(home %)}]
   ["/echo" {:get #(echo %)
             :post #(echo %)}]
   ["" {:middleware [wrap-signed-in]}
    ["/whoami" {:post #(whoami %)}]
    ["/app" {:get #(app %)}]
    ["/api/write" {:post #(write %)}]]
   auth/routes])
