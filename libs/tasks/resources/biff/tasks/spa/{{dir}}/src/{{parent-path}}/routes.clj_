(ns {{parent-ns}}.routes
  (:require
    [biff.util :as bu]
    [crux.api :as crux]
    [{{parent-ns}}.routes.auth :as auth]))

; See https://biff.findka.com/#http-routes

; Test it out:
; curl http://localhost:8080/echo?foo=bar
; curl -XPOST http://localhost:8080/echo -F foo=bar
; curl -XPOST http://localhost:8080/echo -H 'Content-Type: application/edn' -d '{:foo "bar"}'
; curl -XPOST http://localhost:8080/echo -H 'Content-Type: application/json' -d '{"foo":"bar"}'
(defn echo [req]
  ; Default :status is 200. Default :body is "". :headers/* and
  ; :cookies/* are converted to `:headers {...}` and `:cookies {...}`.
  {:headers/Content-Type "application/edn"
   :body (prn-str (merge
                    (select-keys req [:params :body-params])
                    (bu/select-ns req 'params)))})

; This requires authentication, so you'll have to test it from the browser.
(defn whoami [{:keys [biff/uid biff.crux/db]}]
  {:body (:user/email (crux/entity @db uid))
   :headers/Content-Type "text/plain"})

(defn on-error [{:keys [status]}]
  (let [msg (case status
              401 "Not authorized."
              404 "Not found."
              405 "Not allowed."
              406 "Not acceptable."
              500 "Internal server error.")]
    {:status status
     :headers/Content-Type "text/html"
     :body (str "<h1>" msg "</h1>")}))

(defn wrap-signed-in [handler]
  (fn [{:keys [biff/uid] :as req}]
    (if (some? uid)
      (handler req)
      (on-error {:status 401}))))

; See https://cljdoc.org/d/metosin/reitit/0.5.10/doc/introduction#ring-router
(def routes
  [["/echo" {:get #(echo %)
             :post #(echo %)}]
   ["/whoami" {:post #(whoami %)
               :middleware [wrap-signed-in]}]
   auth/routes])
